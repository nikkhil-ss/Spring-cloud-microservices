
package com.validate;

import com.model.Candidate;
import org.springframework.stereotype.Component;
import org.springframework.validation.Errors;
import org.springframework.validation.ValidationUtils;
import org.springframework.validation.Validator;

@Component
public class CustomValidator implements Validator {

    @Override
    public boolean supports(Class<?> clazz) {
        return false;
    }

    @Override
    public void validate(Object arg0,Errors arg1) {
        Candidate candidate = (Candidate) arg0;

        ValidationUtils.rejectIfEmpty(arg1, "candidateName", "", "Name cannot be blank");
        ValidationUtils.rejectIfEmpty(arg1, "candidateContact", "", "Contact Number cannot be blank");
        ValidationUtils.rejectIfEmpty(arg1, "expectedSalary", "", "must be greater than or equal to 10000");
        
      
        	
        if(candidate.getCandidateName() != null && !candidate.getCandidateName().matches("^[a-zA-Z\\s]{5,10}$")) {
        	arg1.rejectValue("candidateName", "Name should contain alphabets and space min 3 chars and max 10");
        }
        if (candidate.getContactNumber() != null) {
            if (!candidate.getContactNumber().matches("^[6-9]\\d{9}$")) {
                arg1.rejectValue("contactNumber", "Contact Number should be of 10 digits/Contact Number should start with range 6 to 9");
            }
        }
        if(candidate.getExpectedSalary()<200000) {
        	arg1.rejectValue("expectedSalary", "must be less than ooor equal to 20000");
        }
        if(candidate.getYearsOfExperience()<0) {
        	arg1.rejectValue("yearsOfExperience", "must be greater than or or equal to 0");
        }
    }
}

