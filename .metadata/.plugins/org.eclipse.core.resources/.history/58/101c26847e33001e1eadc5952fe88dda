package com.util;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;

@Configuration
@EnableWebSecurity
public class SpringSecurityConfig extends WebSecurityConfigurerAdapter {
 
    @Autowired
    private DataSource dataSource;
     
    
    public void configAuthentication(AuthenticationManagerBuilder auth) throws Exception {
    	auth.jdbcAuthentication()
    	.dataSource(dataSource)
    	.usersByUsernameQuery("SELECT uname, pwd,enabled FROM login WHERE uname=?")
    	.authoritiesByUsernameQuery("SELECT uname, role FROM login WHERE uname=?")
    	.passwordEncoder(NoOpPasswordEncoder.getInstance());
        
       
        
    }
 
    
    protected void configure(HttpSecurity http) throws Exception   	{
    	
    	http.authorizeHttpRequests()
    	.anyRequest().authenticated()
    	.and()
    	.formLogin()
    	.and()
    	.httpBasic();
    }
}

